makeCacheMatrix <- function(x = matrix()) {
  inv <- NULL
  
  set <- function(y) {
    x <<- y
    inv <<- NULL  # Reset the inverse when the matrix is updated
  }
  
  get <- function() x
  
  setinverse <- function(inverse) inv <<- inverse
  
  getinverse <- function() inv
  
  list(set = set, get = get, 
       setinverse = setinverse, 
       getinverse = getinverse)
}

cacheSolve <- function(x, ...) {
  inv <- x$getinverse()
  
  if (!is.null(inv)) {
    message("getting cached inverse")
    return(inv)
  }
  
  data <- x$get()
  
  inv <- solve(data, ...)
  x$setinverse(inv)
  
  inv
}


# Create a matrix
m <- matrix(c(1, 2, 3, 4), 2, 2)

# Create the special matrix object
cm <- makeCacheMatrix(m)

# Calculate and cache the inverse
inv <- cacheSolve(cm)

# The second call retrieves the cached inverse
inv_cached <- cacheSolve(cm)


